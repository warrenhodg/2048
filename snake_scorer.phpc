<?php
require_once("scorer.phpi");

class SnakeScorer implements Scorer
{
    private $power;
    private $space_penalty;
    private $moves_ahead = 1;
    private $snake;
    private $possibleNumbers;

    private static $transformations = [
        ["description"=>"TL-TR", "actions"=>[]],
        ["description"=>"TL-BR", "actions"=>["XY"]],
        ["description"=>"TR-TL", "actions"=>["X"]],
        ["description"=>"TR-BR", "actions"=>["X", "XY"]],
        ["description"=>"BL-BR", "actions"=>["Y"]],
        ["description"=>"BL-TL", "actions"=>["Y", "XY"]],
        ["description"=>"BR-BL", "actions"=>["X", "Y"]],
        ["description"=>"BR-TR", "actions"=>["X", "Y", "XY"]]];


    public function __construct($game, $possibleNumbers, $power, $space_penalty)
    {
        $snake = $this->getSnake($game);
        $this->possibleNumbers = $possibleNumbers;
        $this->power = $power;
        $this->space_penalty = $space_penalty;
    }

    public function getScore($game)
    {
        Log::log(Log::LOG_TYPE_AI, 3, "SnakeScorer");

        $max_score = 0;
        
        $backup = $game->backup();
        foreach (SnakeScorer::$transformations as $transform)
        {
            foreach ($transform ["actions"] as $action)
            {
                switch ($action)
                {
                    case "X":
                        $game->mirrorX();
                        break;
                    case "Y":
                        $game->mirrorY();
                        break;
                    case "XY":
                        $game->mirrorXY();
                        break;
                }
            }

            $this->test($max_score, $game, $transform ["description"]);
        }

        return $max_score;
    }    

    private function test(&$max_score, $game, $description)
    {
        $score = $this->scoreSnake($game, $description);
        if ($score >= $max_score)
        {
            $max_score = $score;
        }
        Log::log(Log::LOG_TYPE_AI, 3, "Max Score=" . $max_score);
    }

    private function scoreSnake($game, $description)
    {
        $score = 0;

        $i = 0;
        $spaces = 0;
        { //Count spaces
            while ($i < count($this->snake))
            {
                $c = $game->getCell($this->snake[$i]);
                if ($c != Game::EMPTY_CELL)
                {
                    break;
                }
                ++$spaces;
                ++$i;
            }
        }

        { //Score snake
            $min_value = Game::EMPTY_CELL;
            while ($i < count($this->snake))
            {
                $c = $game->getCell($this->snake[$i]);
                if ($c == Game::EMPTY_CELL)
                {
                    break;
                }

                if (($min_value == Game::EMPTY_CELL) || ($c <= $min_value))
                {
                    $score += $c ^ $this->power;
                    $min_value = $c;
                }

                ++$i;
            }
        } 

        $pre_score = $score;
        for ($i = 0; $i < $spaces; ++$i) $score *= $this->space_penalty;

        Log::log(Log::LOG_TYPE_AI, 4, "Snake:" . $description . " spaces=" . $spaces . " pre=" . $pre_score . " score=" . $score);
        return $score;
    }

    private function getSnake($game)
    {
        $snake = [];

        $x = 0;
        $y = 0;
        $xd = 1;

        while ($y < $game->getHeight())
        {
            $snake [] = [$x, $y];
            if ((($x == 0) && ($xd == -1)) || (($x == $game->getWidth() - 1) && ($xd == 1)))
            {
                ++$y; 
                $xd = -$xd;
            }
            else
            {
                $x += $xd;
            }
        }
        return $snake;
    }
}
