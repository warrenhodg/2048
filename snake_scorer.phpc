<?php
require_once("scorer.phpi");

class SnakeScorer implements Scorer
{
    private $power;
    private $pre_snake_space_penalty;
    private $post_snake_space_penalty;
    private $not_moveable_penalty;
    private $levelsToCalculate = 1;
    private $snake;

    private static $transformations = [
        ["description"=>"TL-TR", "actions"=>[]],
        ["description"=>"TL-BR", "actions"=>["XY"]],
        ["description"=>"TR-TL", "actions"=>["X"]],
        ["description"=>"TR-BR", "actions"=>["X", "XY"]],
        ["description"=>"BL-BR", "actions"=>["Y"]],
        ["description"=>"BL-TL", "actions"=>["Y", "XY"]],
        ["description"=>"BR-BL", "actions"=>["X", "Y"]],
        ["description"=>"BR-TR", "actions"=>["X", "Y", "XY"]]];


    public function __construct($game, $power, $pre_snake_space_penalty, $post_snake_space_penalty, $not_moveable_penalty, $levelsToCalculate)
    {
        $this->snake = $this->getSnake($game);
        $this->power = $power;
        $this->pre_snake_space_penalty = $pre_snake_space_penalty;
        $this->post_snake_space_penalty = $post_snake_space_penalty;
        $this->not_moveable_penalty = $not_moveable_penalty;
        $this->levelsToCalculate = $levelsToCalculate;
    }

    public function getScore($game)
    {
        Log::log(Log::LOG_TYPE_AI, 3, "SnakeScorer");

        return $this->getTotalScoreTillLevel($game, 0);
    }    

    private function getTotalScoreTillLevel($game, $level)
    {
        $this_level_score = $this->getFutureScore($game, $level);
        Log::log(Log::LOG_TYPE_AI, 5 + $level * 3, "Have score " . $this_level_score . " at level " . $level);

        if ($level < $this->levelsToCalculate)
        {
            $backup = $game->backup();

            $total = 0;

            $best_move = FALSE;
            $best_score = FALSE;
            $all_moves = $game->getAllMoves ();
            
            $backup_move = $game->backup(); 
            foreach ($all_moves as $move)
            {
                Log::log(Log::LOG_TYPE_AI, 6 + $level * 3, "Trying direction=" . Game::getDirectionString($move));
                $game->move($move);
                //Log::log(Log::LOG_TYPE_AI, 1, $game->toString(6 + $level * 3));
                $score = $this->getTotalScoreTillLevel($game, $level+1);
                
                if (($best_score === FALSE) || ($score >= $best_score))
                {
                    $best_score = $score;
                    $best_move = $move;
                }
                $game->restore($backup_move); 
            }

            $game->restore($backup);

            $best_score *= 0.5;
            Log::log(Log::LOG_TYPE_AI, 5 + $level * 3, "Returning score " . $this_level_score . " + " . $best_score . " = " . ($best_score + $this_level_score) . " at level " . $level);
            return $best_score + $this_level_score;
        }
        else
        {
            return $this_level_score;
        }
    }

    private function getFutureScore($game, $level)
    {
        $backup = $game->backup();
        $max_score = 0;

        //Try all 8 orientations of snakes
        foreach (SnakeScorer::$transformations as $transform)
        {
            //Log::log(Log::LOG_TYPE_AI, 6 + $level * 3, "Transformation : " . $transform ["description"]);

            //Do the actions to orientate the snake
            foreach ($transform ["actions"] as $action)
            {
                switch ($action)
                {
                    case "X":
                        $game->mirrorX();
                        break;
                    case "Y":
                        $game->mirrorY();
                        break;
                    case "XY":
                        $game->mirrorXY();
                        break;
                }
            }

            $this->test($level, $max_score, $game, $transform ["description"]);
            $game->restore ($backup);
        }

        return $max_score;
    }

    private function test($level, &$max_score, $game, $description)
    {
        $score = $this->scoreSnake($game, $description, $level);
        if ($score >= $max_score)
        {
            $max_score = $score;
        }
        //Log::log(Log::LOG_TYPE_AI, 7 + $level * 3, "Max score=" . $max_score);
    }

    private function scoreSnake($game, $description, $level)
    {
        $score = 0;

        $i = 0;
        $spaces = 0;
        { //Count spaces
            while ($i < count($this->snake))
            {
                $c = $game->getCell($this->snake[$i]);
                if ($c != Game::EMPTY_CELL)
                {
                    break;
                }
                ++$spaces;
                ++$i;
            }
        }

        { //Score snake
            $min_value = Game::EMPTY_CELL;
            $snake_len = 0;
            while ($i < count($this->snake))
            {
                $c = $game->getCell($this->snake[$i]);
                if ($c == Game::EMPTY_CELL)
                {
                    break;
                }

                if (($min_value == Game::EMPTY_CELL) || ($c <= $min_value))
                {
                    $score += pow($c, $this->power);
                    $min_value = $c;
                    ++$snake_len;
                }

                ++$i;
            }
        } 

        $pre_score = $score;
        for ($i = 0; $i < $spaces; ++$i) $score *= $this->pre_snake_space_penalty;
        $spaces_score = $score;

        { //Downscore more per gap in the first line of the snake
            if ($spaces == 0)
            {
                if ($snake_len < $game->getSide())
                {
                    //Log::log(Log::LOG_TYPE_AI, 7 + $level * 3, "Gaps in first line of snake.\n");
                    $score *= $this->post_snake_space_penalty;
                }
                else
                {
                    //Log::log(Log::LOG_TYPE_AI, 7 + $level * 3, "No gaps in first line of snake.\n");
                }
            }
        }

        { //Downscore a lot for a snake missing exactly one element, when there's nothing but the snake
            if (($spaces == 0) && ($snake_len % $game->getSide() == $game->getSide() - 1))
            {
                //Log::log(Log::LOG_TYPE_AI, 7 + $level * 3, "There is exactly on cell missing from the snake");

                $cells_outside_snake = FALSE;
                for ($i = $spaces + $snake_len; $i < count($this->snake); ++$i)
                {
                    $c = $game->getCell($this->snake[$i]);
                    if ($c != Game::EMPTY_CELL)
                    {
                        $cells_outside_snake = TRUE;
                        break;
                    }
                }

                if (!cells_outside_snake)
                {
                    //Log::log(Log::LOG_TYPE_AI, 7 + $level * 3, "The are no cells outside the snake - penalizing");
                    $score *= $this->not_moveable_penalty;
                }
            }
        }

        //Log::log(Log::LOG_TYPE_AI, 7 + $level * 3, "Snake: level=" . $level . " " . $description . " snakelen=" . $snake_len . " spaces=" . $spaces . " prescore=" . $pre_score . " spaces_score=" . $spaces_score . " score=" . $score);
        return $score;
    }

    private function getSnake($game)
    {
        $snake = [];

        $x = 0;
        $y = 0;
        $xd = 1;

        while ($y < $game->getSide())
        {
            $snake [] = [$x, $y];
            if ((($x == 0) && ($xd == -1)) || (($x == $game->getSide() - 1) && ($xd == 1)))
            {
                ++$y; 
                $xd = -$xd;
            }
            else
            {
                $x += $xd;
            }
        }
        return $snake;
    }
}
